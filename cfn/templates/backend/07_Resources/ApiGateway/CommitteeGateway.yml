CommitteeGateway:
  Type: AWS::Serverless::Api
  Properties:
    Name: !Sub ${AWS::StackName}-committee
    StageName: !Sub ${LambdaRunEnvironment}
    TracingEnabled: true
    Domain:
      CertificateArn: !Ref CertificateManagerCertificate
      DomainName: !Sub committee-api.${Domain}.${TLD}
      EndpointConfiguration: REGIONAL
      SecurityPolicy: TLS_1_2
    Cors:
      AllowCredentials: true
      AllowOrigin: "'https://dashboard.{{ DOMAIN }}.{{ TLD }}'"
      AllowMethods: "'OPTIONS,GET,PUT,POST'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    GatewayResponses:
      DEFAULT_4XX:
        ResponseParameters:
          Headers:
            Access-Control-Allow-Origin: "'https://dashboard.{{ DOMAIN }}.{{ TLD }}'"
        ResponseTemplates:
          "application/json": "{ \"message\": 4xx error }"
      DEFAULT_5XX:
        ResponseParameters:
          Headers:
            Access-Control-Allow-Origin: "'https://dashboard.{{ DOMAIN }}.{{ TLD }}'"
        ResponseTemplates:
          "application/json": "{ \"message\": 5xx error }"
    MethodSettings:
      - LoggingLevel: INFO
        ResourcePath: '/*'
        HttpMethod: '*'
        CacheDataEncrypted: true
        MetricsEnabled: true
        DataTraceEnabled: true
    Auth:
      DefaultAuthorizer: PlatformUserCognitoAuthorizer
      AddDefaultAuthorizerToCorsPreflight: false
      Authorizers:
        PlatformUserCognitoAuthorizer:
          UserPoolArn: !GetAtt PlatformUserPool.Arn
      ResourcePolicy:
        IpRangeWhitelist: !Ref CloudFlareIPs
